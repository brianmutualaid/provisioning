#
# Macros
#

management_if="em1"
vpn_if="tun0"
public_frontend_if="vlan20"
public_backend_if="vlan30"
internal_open_if="vlan40"
internal_restricted_if="vlan50"
wifi_if="vlan100"
wifi_guests_if="vlan1003"

web_frontend="172.17.20.64"

pf_udp_services="{ 53 67 }"
pf_icmp_services="{ echoreq }"

#
# Tables
#

# IPs that try to brute force SSH
table <brutes> persist

# Non-internet-routable IP ranges
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16 \
                   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
                   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 203.0.113.0/24 }

# authpf users
table <authpf_users> persist

#
# Options
#

set block-policy drop
set skip on lo
set loginterface egress

#
# Packet filtering (normalization)
#

# Normalize all incoming traffic with scrub (https://man.openbsd.org/pf.conf#Scrub)
match in all scrub (no-df random-id max-mss 1440)

# Translate source IP on all outbound traffic to IP address of egress interface
match out on egress inet from !(egress:network) to any nat-to (egress:0)

# Antispoof
antispoof quick for { egress, $management_if, $vpn_if, $public_frontend_if, $public_backend_if, $internal_open_if, $internal_restricted_if, $wifi_if, $wifi_guests_if }

#
# Packet filtering (stateful filtering)
#

# Block weird IPs and brutes
block in quick log on egress from { <brutes> <martians> } to any
block return out quick log on egress from any to { <brutes> <martians> }

# Default deny
block log all

# Pass all traffic out any interface
pass out quick

# Allow SSH from VPN, wifi, and management networks
pass in quick on $vpn_if inet proto tcp from $vpn_if:network to $management_if port 22
pass in quick on $wifi_if inet proto tcp from $wifi_if:network to $management_if port 22
pass in quick on $management_if inet proto tcp from $management_if:network to $management_if port 22

# Allow all traffic from authenticated users on VPN, wifi, and management networks
pass in quick on $vpn_if from <authpf_users> to any
pass in quick on $wifi_if from <authpf_users> to any
pass in quick on $management_if from <authpf_users> to any

# Allow DHCP, DNS, and ping to firewall from all networks
pass in quick on $management_if inet proto udp from $management_if:network to $management_if port $pf_udp_services
pass in quick on $management_if inet proto icmp from $management_if:network to $management_if icmp-type $pf_icmp_services
pass in quick on $vpn_if inet proto udp from $vpn_if:network to $vpn_if port $pf_udp_services
pass in quick on $vpn_if inet proto icmp from $vpn_if:network to $vpn_if icmp-type $pf_icmp_services
pass in quick on $public_frontend_if inet proto udp from $public_frontend_if:network to $public_frontend_if port $pf_udp_services
pass in quick on $public_frontend_if inet proto icmp from $public_frontend_if:network to $public_frontend_if icmp-type $pf_icmp_services
pass in quick on $public_backend_if inet proto udp from $public_backend_if:network to $public_backend_if port $pf_udp_services
pass in quick on $public_backend_if inet proto icmp from $public_backend_if:network to $public_backend_if icmp-type $pf_icmp_services
pass in quick on $internal_open_if inet proto udp from $internal_open_if:network to $internal_open_if port $pf_udp_services
pass in quick on $internal_open_if inet proto icmp from $internal_open_if:network to $internal_open_if icmp-type $pf_icmp_services
pass in quick on $internal_restricted_if inet proto udp from $internal_restricted_if:network to $internal_restricted_if port $pf_udp_services
pass in quick on $internal_restricted_if inet proto icmp from $internal_restricted_if:network to $internal_restricted_if icmp-type $pf_icmp_services
pass in quick on $wifi_if inet proto udp from $wifi_if:network to $wifi_if port $pf_udp_services
pass in quick on $wifi_if inet proto icmp from $wifi_if:network to $wifi_if icmp-type $pf_icmp_services
pass in quick on $wifi_guests_if inet proto udp from $wifi_guests_if:network to $wifi_guests_if port $pf_udp_services
pass in quick on $wifi_guests_if inet proto icmp from $wifi_guests_if:network to $wifi_guests_if icmp-type $pf_icmp_services

# Allow all incoming traffic from internal networks to non-weird public IPs
pass in on { $management_if, $vpn_if, $public_frontend_if, $public_backend_if, $internal_open_if, $internal_restricted_if, $wifi_if, $wifi_guests_if } to ! <martians>

# Allow HTTP and HTTPS from haproxy frontend to haproxy backend
pass in quick on $public_frontend_if proto tcp from $public_frontend_if:network to $public_backend_if:network port { 80, 443 }
pass in quick on $public_frontend_if proto tcp from $public_frontend_if:network to $internal_restricted_if:network port { 80, 443 }

# Allow all traffic from VPN and wifi users to open internal network
pass in quick on $vpn_if from $vpn_if:network to $internal_open_if:network
pass in quick on $wifi_if from $wifi_if:network to $internal_open_if:network

# Allow public UDP traffic to OpenVPN
#pass in on egress proto udp from any to egress port 443 keep state (max-src-conn-rate 3/10, overload <brutes> flush global)

#TEMPORARY
# Allow SSH traffic from internet
#pass in on egress proto tcp from any to egress port 22 keep state (max-src-conn-rate 4/10, overload <brutes> flush global)
# Allow restrict if to get to wifi if (to copy stuff to freenas)
#pass in quick on $internal_restricted_if from $internal_restricted_if:network to $wifi_if:network
#TEMPORARY

# Allow public TCP traffic to haproxy
#pass in on egress proto tcp from any to egress port 80 rdr-to $web_frontend
#pass in on egress proto tcp from any to egress port 443 rdr-to $web_frontend
